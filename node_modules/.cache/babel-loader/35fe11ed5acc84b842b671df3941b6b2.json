{"ast":null,"code":"import _classCallCheck from\"/Users/jonathangraziani/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jonathangraziani/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jonathangraziani/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jonathangraziani/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jonathangraziani/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{CardList}from'./components/card-list/card-list.component';import{SearchBox}from'./components/search-box/search-box.components';import'./App.css';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this));_this.handleChange=function(e){_this.setState({searchField:e.target.value});};_this.state={//we are creating an array here\n//nomrally would not hard code data here we would fetch from an api here in this array\nmonsters:[],searchField:''};return _this;}//this is a lifecycle method\n// this is for fetching APIs\n_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(users){return _this2.setState({monsters:users});});//users was the file name in the jsonplaceholder uptop\n}//when using this. in funciton below you have to use = () => otherwise\n//at the top you have to write in constructor this.setState = this.setState.bind(this);\n//you would have to use .bind to make it work\n//this is called lexical scoping in react\n},{key:\"render\",value:function render(){var _this$state=this.state,monsters=_this$state.monsters,searchField=_this$state.searchField;//top is easy way of writing this.\n//const monsters = this.state.monsters;\n//const searchField = this.state.searchField;\nvar filteredMonsters=monsters.filter(function(monster){return monster.name.toLowerCase().includes(searchField.toLocaleLowerCase());});return React.createElement(\"div\",{className:\"App\"},React.createElement(\"h1\",null,\"Monsters Rolodex\"),React.createElement(SearchBox,{placeholder:\"search monsters\",handleChange:this.handleChange}),React.createElement(CardList,{monsters:filteredMonsters}));}}]);return App;}(Component);//this was used before we created the search field <CardList monsters={this.state.monsters}></CardList>\n//this was old <input \n//type='search' \n//placeholder='search monsters' \n//onChange={e => this.setState({searchField: e.target.value})} />\n//<CardList monsters={filteredMonsters}></CardList>\n// rewriting handleChange so this can be reused. below is old version\n//<SearchBox\n//placeholder='search monsters' \n//handleChange={e => this.setState({searchField: e.target.value})}/>\nexport default App;","map":{"version":3,"sources":["/Users/jonathangraziani/monsters-rolodex/src/App.js"],"names":["React","Component","CardList","SearchBox","App","handleChange","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","filteredMonsters","filter","monster","name","toLowerCase","includes","toLocaleLowerCase"],"mappings":"qnBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,OAAQC,QAAR,KAAuB,4CAAvB,CAEA,OAAQC,SAAR,KAAwB,+CAAxB,CAEA,MAAO,WAAP,C,GAEMC,CAAAA,G,6DACJ,cAAc,qCACZ,uEADY,MAuBdC,YAvBc,CAuBC,SAACC,CAAD,CAAO,CACpB,MAAKC,QAAL,CAAc,CAACC,WAAW,CAAEF,CAAC,CAACG,MAAF,CAASC,KAAvB,CAAd,EACD,CAzBa,CAGZ,MAAKC,KAAL,CAAa,CACX;AACA;AACAC,QAAQ,CAAE,EAHC,CAIXJ,WAAW,CAAE,EAJF,CAAb,CAHY,aASb,CAED;AACF;6EACsB,iBAClBK,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADd,EAECF,IAFD,CAEM,SAAAG,KAAK,QAAI,CAAA,MAAI,CAACV,QAAL,CAAc,CAAEK,QAAQ,CAAEK,KAAZ,CAAd,CAAJ,EAFX,EAEkD;AACnD,CAEH;AACA;AACA;AACA;uCAKW,iBACyB,KAAKN,KAD9B,CACAC,QADA,aACAA,QADA,CACUJ,WADV,aACUA,WADV,CAEP;AACA;AACA;AAEA,GAAMU,CAAAA,gBAAgB,CAAGN,QAAQ,CAACO,MAAT,CAAgB,SAAAC,OAAO,QAC9CA,CAAAA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCf,WAAW,CAACgB,iBAAZ,EAApC,CAD8C,EAAvB,CAAzB,CAGA,MACE,4BAAK,SAAS,CAAC,KAAf,EACE,iDADF,CAEE,oBAAC,SAAD,EACE,WAAW,CAAC,iBADd,CAEE,YAAY,CAAE,KAAKnB,YAFrB,EAFF,CAME,oBAAC,QAAD,EAAU,QAAQ,CAAEa,gBAApB,EANF,CADF,CAWD,C,iBAhDejB,S,EAmDlB;AACA;AACQ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAER,cAAeG,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\n\nimport {SearchBox} from './components/search-box/search-box.components';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      //we are creating an array here\n      //nomrally would not hard code data here we would fetch from an api here in this array\n      monsters: [],\n      searchField: ''  \n    };\n  }\n\n  //this is a lifecycle method\n// this is for fetching APIs\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}));//users was the file name in the jsonplaceholder uptop\n  }\n\n//when using this. in funciton below you have to use = () => otherwise\n//at the top you have to write in constructor this.setState = this.setState.bind(this);\n//you would have to use .bind to make it work\n//this is called lexical scoping in react\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    //top is easy way of writing this.\n    //const monsters = this.state.monsters;\n    //const searchField = this.state.searchField;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters' \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n    </div>\n    )\n  }\n}\n\n//this was used before we created the search field <CardList monsters={this.state.monsters}></CardList>\n//this was old <input \n        //type='search' \n        //placeholder='search monsters' \n        //onChange={e => this.setState({searchField: e.target.value})} />\n        //<CardList monsters={filteredMonsters}></CardList>\n\n        // rewriting handleChange so this can be reused. below is old version\n        //<SearchBox\n        //placeholder='search monsters' \n        //handleChange={e => this.setState({searchField: e.target.value})}/>\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}